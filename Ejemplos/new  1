/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author utp
 */
import choco.Choco;
import choco.cp.model.CPModel;
import choco.cp.solver.CPSolver;
import choco.kernel.model.Model;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.solver.Solver;

public class MagicSquare {
    public static void main(String[] args){
        //Constantes del problema
        int n = 9;
        int M = n*(n*n+1)/2;

        //Nuestro Modelo
        Model m = new CPModel();
        IntegerVariable[][] cells = new IntegerVariable[n][n];
        for (int i =0; i< n; i++){
            for (int j =0; j< n; j++){
                 cells[i][j] = Choco.makeIntVar("cell"+j,1,n*n);
                 m.addVariable(cells[i][j]);
            }
        }

        //Restricciones
        // ..... sobre filas
        Constraint[] rows = new Constraint[n];
        for(int i =0; i<n;i++){
            rows[i] = Choco.eq(Choco.sum(cells[i]), M);

        }
        m.addConstraints(rows);

        //.... sobre las columnas
        //primero, las columnas sobre variables temporales
        IntegerVariable[][] cellsDual = new IntegerVariable[n][n];

        for (int i =0; i< n; i++){
            for (int j =0; j< n; j++){
                 cellsDual[i][j] = cells[j][i];
            }
        }

        Constraint[] cols = new Constraint[n];
        for(int i =0; i<n;i++){
            cols[i] = Choco.eq(Choco.sum(cellsDual[i]), M);

        }
        m.addConstraints(cols);

        //.... sobre las diagonales
        IntegerVariable[][] diags = new IntegerVariable[2][n];

        for (int i =0; i< n; i++){
            diags[0][i] = cells[i][i];
            diags[1][i] = cells[i][(n-1) -i];
        }


        m.addConstraint(Choco.eq(Choco.sum(diags[0]),M ));
        m.addConstraint(Choco.eq(Choco.sum(diags[1]),M ));

        //Todas las variables son diferentes
        IntegerVariable[] allVars = new IntegerVariable[n*n];

        for (int i =0; i< n; i++){
            for (int j =0; j< n; j++){
                 allVars[i*n+j] = cells[i][j];
            }
        }

        m.addConstraint(Choco.allDifferent(allVars));

        //Nuestra solucion
        Solver s= new CPSolver();

        //ller el modelo
        s.read(m);

        // resolver el problema
        s.solve();

        for (int i =0; i< n; i++){
            for (int j =0; j< n; j++){
                 System.out.print(s.getVar(cells[i][j]).getVal() + " ");

            }
            System.out.println("");
        }

    }

}
